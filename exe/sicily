#!/usr/bin/env ruby

# frozen_string_literal: true

$SICILY_LOG_TO_FILE = (ENV['SICILY_LOG'] == 'file')
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), ['..', 'lib'])

require 'sicily'

command = ARGV[0]

case command
when 'generate'
  require 'fileutils'
  require 'sicily/generator'

  Dir['./generator/*.rb'].each do |file|
    require file
  end

  FileUtils.rm_rf './config'
  FileUtils.mkdir_p './config'

  Sicily.generators.each do |generator|
    File.write("./config/#{generator.filename}", generator.content)
  end

  files_to_edit = Sicily.generators.map(&:filename).reject { |t| t.start_with?('.') }
  messages_to_display = Sicily.generators.map(&:post_generate_message).reject { |t| t.to_s.empty? }

  unless files_to_edit.empty?
    puts 'Try edit the following files:'
    files_to_edit.each do |file|
      puts "  ./config/#{file}"
    end
  end

  unless messages_to_display.empty?
    puts ''
    puts messages_to_display.join('\n')
  end
when 'monitor'
  `echo test >> monitor.log`
  necessary_config_files = ['rules.rb']
  config_files_to_load = ['google_photo.rb', 'rules.rb']

  necessary_config_files.each do |file|
    next if File.exist? "./config/#{file}"

    puts "./config/#{file} is missing!"
    puts '  Type: `sicily generate`'
    exit
  end

  config_files_to_load.each do |filename|
    path = "./config/#{filename}"
    load(path) if File.exist?(path)
  end

  sleep
when 'start'
  command1 = 'whenever --load-file ./config/.schedule.rb --update-crontab'
  `#{command1}`

  god_file = File.expand_path('./config/.sicily.god')
  command2 = "god -c #{god_file}"
  `#{command2}`
when 'stop'
  `god stop sicily`
  `whenever --load-file ./config/.schedule.rb --clear-crontab`
else
  banner = <<~BANNER
    Usage:
      Generating config files:
        sicily generate
      Start monitoring in this terminal session:
        sicily monitor
      Start monitoring forever:
        sicily start
      Stop monitoring forever:
        sicily stop
  BANNER
  puts banner
end
